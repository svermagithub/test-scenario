spring:
  kafka:
    bootstrap-servers: kafka-broker1:9093,kafka-broker2:9093
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      max-in-flight-requests-per-connection: 1
      retries: 3
      properties:
        security.protocol: SSL
        ssl.truststore.location: /path/to/truststore.jks
        ssl.truststore.password: truststore-password
        ssl.keystore.location: /path/to/keystore.jks
        ssl.keystore.password: keystore-password

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: kafka-consumer-group
      properties:
        security.protocol: SSL
        ssl.truststore.location: /path/to/truststore.jks
        ssl.truststore.password: truststore-password
        ssl.keystore.location: /path/to/keystore.jks
        ssl.keystore.password: keystore-password


import org.springframework.kafka.core.KafkaTemplate
import org.springframework.stereotype.Component

@Component
class KafkaProducer(private val kafkaTemplate: KafkaTemplate<String, Any>) {

    fun sendMessage(topic: String, message: Any) {
        kafkaTemplate.send(topic, message)
    }
}

@Component
class KafkaConsumer {

    @KafkaListener(topics = ["test-topic"])
    fun receiveMessage(message: Any) {
        // Your consumer logic here
        println("Received message: $message")
    }
}
